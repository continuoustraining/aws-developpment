AWSTemplateFormatVersion : 2010-09-09

Parameters:
  BucketName:
    Type: String
    
Resources:
  Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - ProcessingLambdaPermission
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ProcessingLambdaFunction.Arn
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: .csv

  ProcessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ProcessingLambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${BucketName}'
      SourceAccount: !Ref AWS::AccountId

  ProcessingLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*
        - PolicyName: getAndDeleteObjects
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:*
              Resource:  
              - !Sub 'arn:aws:s3:::${BucketName}/'
              - !Sub 'arn:aws:s3:::${BucketName}/*'

  ProcessingLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import csv
          
          def handler(event, context):
            record = event['Records'][0]
            bucket = record['s3']['bucket']['name']
            file_key = record['s3']['object']['key']
            s3 = boto3.client('s3')
            contents = s3.get_object(
              Bucket=bucket,
              Key=file_key)['Body']
            print(contents.read())
            return {'status_code': 200}
      Handler: index.handler
      Description: Function that is called when a file is stored in S3.
      Runtime: python3.7
      Role: !GetAtt ProcessingLambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 120
      
Outputs:
  S3Bucket:
    Value: !Ref Bucket
    Description: "S3 bucket for lambda"